{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Translab\\\\Desktop\\\\react-2048-game\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Board from \"./Board\";\nimport { slideLeft, slideRight, slideUp, slideDown, addRandomTile, isGameOver } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 4;\nconst initBoard = () => {\n  let board = Array(BOARD_SIZE).fill().map(() => Array(BOARD_SIZE).fill(0));\n  board = addRandomTile(board);\n  return addRandomTile(board);\n};\nconst App = () => {\n  _s();\n  const [board, setBoard] = useState(initBoard());\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWon, setGameWon] = useState(false);\n  const handleKeyDown = e => {\n    if (gameOver) return;\n    let newBoard;\n    switch (e.key) {\n      case \"ArrowLeft\":\n        newBoard = slideLeft(board);\n        break;\n      case \"ArrowRight\":\n        newBoard = slideRight(board);\n        break;\n      case \"ArrowUp\":\n        newBoard = slideUp(board);\n        break;\n      case \"ArrowDown\":\n        newBoard = slideDown(board);\n        break;\n      default:\n        return;\n    }\n    if (JSON.stringify(newBoard) !== JSON.stringify(board)) {\n      newBoard = addRandomTile(newBoard);\n      setBoard(newBoard);\n      if (isGameOver(newBoard)) setGameOver(true);\n      if (newBoard.flat().includes(2048)) setGameWon(true);\n    }\n  };\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [board, gameOver]);\n  const restartGame = () => {\n    setBoard(initBoard());\n    setGameOver(false);\n    setGameWon(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"2048 Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), gameWon && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: \"You Win!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 19\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: \"Game Over!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: restartGame,\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"FvanBhANvVB9w7/T4yGxdWEYEoY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Board","slideLeft","slideRight","slideUp","slideDown","addRandomTile","isGameOver","jsxDEV","_jsxDEV","BOARD_SIZE","initBoard","board","Array","fill","map","App","_s","setBoard","gameOver","setGameOver","gameWon","setGameWon","handleKeyDown","e","newBoard","key","JSON","stringify","flat","includes","window","addEventListener","removeEventListener","restartGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Translab/Desktop/react-2048-game/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Board from \"./Board\";\nimport { slideLeft, slideRight, slideUp, slideDown, addRandomTile, isGameOver } from \"./utils\";\n\nconst BOARD_SIZE = 4;\n\nconst initBoard = () => {\n  let board = Array(BOARD_SIZE).fill().map(() => Array(BOARD_SIZE).fill(0));\n  board = addRandomTile(board);\n  return addRandomTile(board);\n};\n\nconst App = () => {\n  const [board, setBoard] = useState(initBoard());\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWon, setGameWon] = useState(false);\n\n  const handleKeyDown = (e) => {\n    if (gameOver) return;\n\n    let newBoard;\n    switch (e.key) {\n      case \"ArrowLeft\":\n        newBoard = slideLeft(board);\n        break;\n      case \"ArrowRight\":\n        newBoard = slideRight(board);\n        break;\n      case \"ArrowUp\":\n        newBoard = slideUp(board);\n        break;\n      case \"ArrowDown\":\n        newBoard = slideDown(board);\n        break;\n      default:\n        return;\n    }\n    if (JSON.stringify(newBoard) !== JSON.stringify(board)) {\n      newBoard = addRandomTile(newBoard);\n      setBoard(newBoard);\n      if (isGameOver(newBoard)) setGameOver(true);\n      if (newBoard.flat().includes(2048)) setGameWon(true);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [board, gameOver]);\n\n  const restartGame = () => {\n    setBoard(initBoard());\n    setGameOver(false);\n    setGameWon(false);\n  };\n\n  return (\n    <div className=\"game-container\">\n      <h1>2048 Game</h1>\n      {gameWon && <div className=\"message\">You Win!</div>}\n      {gameOver && <div className=\"message\">Game Over!</div>}\n      <Board board={board} />\n      <button onClick={restartGame}>Restart</button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}