{"ast":null,"code":"// Slide and merge row to the left\nexport function slideLeft(board) {\n  let newBoard = board.map(row => slideAndMergeRow(row));\n  return newBoard;\n}\nfunction slideAndMergeRow(row) {\n  let arr = row.filter(val => val !== 0);\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] === arr[i + 1]) {\n      arr[i] *= 2;\n      arr[i + 1] = 0;\n    }\n  }\n  arr = arr.filter(val => val !== 0);\n  while (arr.length < row.length) arr.push(0);\n  return arr;\n}\nexport function slideRight(board) {\n  let newBoard = board.map(row => slideAndMergeRow(row.slice().reverse()).reverse());\n  return newBoard;\n}\nfunction transpose(board) {\n  let newBoard = board[0].map((_, colIndex) => board.map(row => row[colIndex]));\n  return newBoard;\n}\nexport function slideUp(board) {\n  let transposed = transpose(board);\n  let moved = slideLeft(transposed);\n  return transpose(moved);\n}\nexport function slideDown(board) {\n  let transposed = transpose(board);\n  let moved = slideRight(transposed);\n  return transpose(moved);\n}\nexport function addRandomTile(board) {\n  let emptyPositions = [];\n  for (let r = 0; r < board.length; r++) {\n    for (let c = 0; c < board[0].length; c++) {\n      if (board[r][c] === 0) emptyPositions.push([r, c]);\n    }\n  }\n  if (emptyPositions.length === 0) return board;\n  let [row, col] = emptyPositions[Math.floor(Math.random() * emptyPositions.length)];\n  let newValue = Math.random() < 0.9 ? 2 : 4;\n  let newBoard = board.map(r => r.slice());\n  newBoard[row][col] = newValue;\n  return newBoard;\n}\nexport function isGameOver(board) {\n  for (let r = 0; r < board.length; r++) {\n    for (let c = 0; c < board[0].length; c++) {\n      if (board[r][c] === 0) return false;\n      let curr = board[r][c];\n      if (c < board[0].length - 1 && board[r][c + 1] === curr || r < board.length - 1 && board[r + 1][c] === curr) return false;\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["slideLeft","board","newBoard","map","row","slideAndMergeRow","arr","filter","val","i","length","push","slideRight","slice","reverse","transpose","_","colIndex","slideUp","transposed","moved","slideDown","addRandomTile","emptyPositions","r","c","col","Math","floor","random","newValue","isGameOver","curr"],"sources":["C:/Users/Translab/Desktop/react-2048-game/src/utils.js"],"sourcesContent":["// Slide and merge row to the left\r\nexport function slideLeft(board) {\r\n  let newBoard = board.map(row => slideAndMergeRow(row));\r\n  return newBoard;\r\n}\r\n\r\nfunction slideAndMergeRow(row) {\r\n  let arr = row.filter(val => val !== 0);\r\n  for (let i = 0; i < arr.length - 1; i++) {\r\n    if (arr[i] === arr[i + 1]) {\r\n      arr[i] *= 2;\r\n      arr[i + 1] = 0;\r\n    }\r\n  }\r\n  arr = arr.filter(val => val !== 0);\r\n  while (arr.length < row.length) arr.push(0);\r\n  return arr;\r\n}\r\n\r\nexport function slideRight(board) {\r\n  let newBoard = board.map(row => slideAndMergeRow(row.slice().reverse()).reverse());\r\n  return newBoard;\r\n}\r\n\r\nfunction transpose(board) {\r\n  let newBoard = board[0].map((_, colIndex) => board.map(row => row[colIndex]));\r\n  return newBoard;\r\n}\r\n\r\nexport function slideUp(board) {\r\n  let transposed = transpose(board);\r\n  let moved = slideLeft(transposed);\r\n  return transpose(moved);\r\n}\r\n\r\nexport function slideDown(board) {\r\n  let transposed = transpose(board);\r\n  let moved = slideRight(transposed);\r\n  return transpose(moved);\r\n}\r\n\r\nexport function addRandomTile(board) {\r\n  let emptyPositions = [];\r\n  for (let r = 0; r < board.length; r++) {\r\n    for (let c = 0; c < board[0].length; c++) {\r\n      if (board[r][c] === 0) emptyPositions.push([r, c]);\r\n    }\r\n  }\r\n  if (emptyPositions.length === 0) return board;\r\n\r\n  let [row, col] = emptyPositions[Math.floor(Math.random() * emptyPositions.length)];\r\n  let newValue = Math.random() < 0.9 ? 2 : 4;\r\n  let newBoard = board.map(r => r.slice());\r\n  newBoard[row][col] = newValue;\r\n  return newBoard;\r\n}\r\n\r\nexport function isGameOver(board) {\r\n  for (let r = 0; r < board.length; r++) {\r\n    for (let c = 0; c < board[0].length; c++) {\r\n      if (board[r][c] === 0) return false;\r\n      let curr = board[r][c];\r\n      if ((c < board[0].length - 1 && board[r][c + 1] === curr) ||\r\n          (r < board.length - 1 && board[r + 1][c] === curr)) \r\n        return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}